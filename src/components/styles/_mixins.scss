@mixin displayFlex {
    display: flex;
}

@mixin justifyCenter {
    justify-content: center;
}

@mixin justifySpaceAround {
    justify-content: space-around;
}

@mixin justifySpaceBetween {
    justify-content: space-between;
}

@mixin justifyFlexEnd {
    justify-content: flex-end;
}

@mixin alignCenter {
    align-items: center;
}

@mixin flexCol {
    @include displayFlex;
    flex-direction: column;
}

@mixin flexRow {
    @include displayFlex;
    flex-direction: row;
}

@mixin luloFont {
    font-family: 'Lulo-One-Bold', serif;
}

@mixin breakpoint($min: 0, $max: 0) {
    $type: type-of($min);
    
    @if $type == string {
        @if $min == xs { 
        @media (max-width: 320px) { @content; }       // Mobile Devices
        }
        
        @else if $min == sm {
        @media (min-width: 640px) { @content; }       // Tablet Devices
        }
        
        @else if $min == md {
        @media (min-width: 992px) { @content; }       // Desktops
        }
        
        @else if $min == lg {
        @media (min-width: 1200px) { @content; }      // Widescreen Desktops
        }
    
        // Otherwise pass a warning to the compiler as to the appropriate options
        @else {
        @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
        }
    }
    @else if $type == number {
        // Allow for custom parameters for min and max size
        $query: "all" !default;
        @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
        @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
        @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
        @media #{$query} { @content; }
    }
}